" MOGRIAs VIM CONFIG (generated by Home-Manager)
" vim: sw=2 ts=2 et
" this vim configuration is in utf8
scriptencoding utf-8
" set encoding to utf8 by default
set encoding=utf-8

" the vimrc config file is somewhere in the nix store and passed 
" to neovim with the -c option in the wrapper script
" This finds out where this vimrc lies during runtime
" for certain plugins to work like UltiSnips
let $MYVIMRC=expand('<sfile>:p')

set nocompatible
syntax enable

" GENERAL BEHAVIOUR {{{
"
  " use space as the mapleader for easy combos to type
  " these bindings can be user-defined
  let mapleader = " "
  " and use \ as the maplocalleader (key bindings with <LocalLeader> prefix
  " this one is global as the mapleader, but bindings from filetype plugins
  " should use <LocalLeader> instead of <Leader>
  let maplocalleader = '\'

  set autowrite " save the opened file automatically when navigating, even tags
  " set autowriteall " save the opened file automatically even when quitting
  set autoread " reload file automatically when changed on disk, doesn't work in call cases, so see below
  " Triger `autoread` when files changes on disk
  " https://unix.stackexchange.com/questions/149209/refresh-changed-content-of-file-opened-in-vim/383044#383044
  " https://vi.stackexchange.com/questions/13692/prevent-focusgained-autocmd-running-in-command-line-editing-mode
  " autocmd FocusGained,BufEnter,CursorHold,CursorHoldI * if mode() != 'c' | checktime | endif
  " Notification after file change
  " https://vi.stackexchange.com/questions/13091/autocmd-event-for-autoread
  "autocmd FileChangedShellPost *
  "   \ echohl WarningMsg | echo "File changed on disk. Buffer reloaded." | echohl None
  "
  " NOTE: the two commands above dont work when being in q: or ex mode,
  "       or probably when the current buffer is not backed by a file
  au FocusGained,BufEnter * :checktime

  " pattern completion in ex mode with * of all files in the
  " working directory and in the folder of the current file

  " have Vim jump to the last position when reopening a file
  if has("autocmd")
    au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
  endif

  " open a quickfix window when using :grep or :Ggrep or :make(from vim-fugitive/git)
  autocmd QuickFixCmdPost *grep* cwindow
  autocmd QuickFixCmdPost *make* cwindow
  " quickly jump in quickfix list
  noremap <Leader>n :cnext<CR>
  noremap <Leader>N :cprevious<CR>

  " activate mouse integration
  set mouse=a

  " have some minumum space between border
  " and the cursor on the top and bottom
  set scrolloff=5

  " show line & column number
  set ruler

  if &term =~ '^screen'
      " tmux will send xterm-style keys when its xterm-keys option
      " is on
      execute "set <xUp>=\e[1;*A"
      execute "set <xDown>=\e[1;*B"
      execute "set <xRight>=\e[1;*C"
      execute "set <xLeft>=\e[1;*D"
  endif

  " allow saving with CTRL-S ($ stty -ixon # required)
  noremap <C-S> :w<CR>
  inoremap <C-S> <Esc>:w<CR>a

  " CTRL-l like in shell for top of the screen
  noremap <C-l> zt<Esc>:redraw!<CR>
  inoremap <C-l> <Esc>zt:redraw!<CR>a

  " type ! in normal mode to run a command with the current
  noremap ! :!

  " SHIFT-ENTER builds not used and doesnt work
  noremap <Leader>b :make %:p<CR>

  " remove whitespace at end of lines
  noremap <Leader>we :%s/\s\+$//g<CR>
  vnoremap <Leader>we :s/\s\+$//g<CR>
" }}}

" SYSTEM CLIPBOARD CONFIGURATION {{{
  map <Leader>y "+y
  noremap <Leader>p :set paste<CR>"+p:set nopaste<CR>
  noremap <Leader>P :set paste<CR>"+P:set nopaste<CR>
  vnoremap <Leader>p <ESC>:set paste<CR>gv"+p:set nopaste<CR>
" }}}

" FINDING FILES WITH STANDARD VIM BEHAVIOUR {{{
  " ignore these files
  set wildignore+=*.o,*.so,*.a,*.dylib,*.dll,.*.sw?,.DS_STORE,.root,vendor,node_modules,.cache,.nix-profile
  set wildignorecase " case insensitive
  set wildoptions=tagfile " press CTRL-D while in ex mode to complete tags

  " always show vim command autocompletion
  set wildmenu
  set wildmode=longest,list,full


  " have all files in current directory in file and cd path
  " when using ex commands or gf in normal mode
  " Note: there will be language specific search paths generated
  " by a nix expression appended to this file
  set path +=.,,./src/**;$HOME/Code,./htdocs/**;$HOME/Code,.//**;$HOME/Code,./app/**;$HOME/Code
  set suffixesadd=.php,.java.,.nix,/default.nix,.tpl,.scss,.css,.js,.jsx
  set cdpath +=.,,
" }}}


" STATUS BAR (vim-airline)
  " show partial commands typed below the status line
  set showcmd

  " display all buffers as tab when only one tab is open
  let g:airline#extensions#branch#enabled = 0

  let g:airline#extensions#tabline#enabled = 1
  let g:airline#extensions#tabline#enabled = 'unique_tail_improved'

  let g:airline_skip_empty_sections = 1


  let g:airline_detect_modified=1
  let g:airline_detect_paste=1
  let g:airline_detect_crypt=1
  let g:airline_detect_spell=0

  let g:airline_detect_spelllang=1
  let g:airline_detect_iminsert=0

  let g:airline_inactive_collapse=1
  let g:airline_inactive_alt_sep=0
  " themes are automatically selected based on the matching colorscheme. this can be overridden by defining a value. >
  let g:airline_theme='base16'

  let g:airline_powerline_fonts = 1

  let g:airline_theme_patch_func = 'AirlineThemePatch'
  function! AirlineThemePatch(palette)
    if g:airline_theme == 'base16'
      for colors in values(a:palette.inactive)
        let colors[3] = 245
      endfor
    endif
  endfunction

  " performance
  let g:airline_highlighting_cache = 1
<
"'

" COMMAND MODE EMCAS/SHELL KEYBINDINGS {{{
  " most of them already exist except C-A which autocompletes everything
  " which is pretty useless? At least i'm more used to it getting me to
  " the beginning of the line
  cmap <C-A> <Home>
" }}}

" INSERT MODE EMACS/SHELL KEYBINDINGS {{{
    inoremap <C-b> <Left>
    inoremap <C-f> <Right>
    " overrides repeat last insert, to start of the line, use CTRL-Space instead
    inoremap <C-Space> <C-a>
    " beginning of indented line"
    imap <C-a> <Esc>^i
    inoremap <C-e> <End>
    " overrides digraphs functionality
    imap <C-k> <Esc>d$A
" }}}

" CURSOR AND SIDEBAR LAYOUT {{{
  set number
  if has("gui_running")
    set antialias
  endif
  set cursorline
  set cursorcolumn
" }}}

" SEARCHING OPTIONS {{{
  set hlsearch
  " turn off hlsearch in normal mode with CTRL-N, disabled due to
  " autocompletion on CTRL-N
  " nnoremap <C-N> <ESC>:nohlsearch<CR>
  set incsearch " move cursor while typing search

  " the search pattern is case-insensitive when only using lowercase letters
  " note: this can be disabled by using \c in the search pattern
  set ignorecase
  set smartcase
  "because incsearch is set you can use CTRL-/ while searching to find the next match
  cmap <C-_> <C-G>
" }}}

" SPELLING OPTIONS {{{
  set spell
  set spelllang=en,de,en,de
  set spellsuggest=best

  nnoremap <Leader>U gUiw
  nnoremap <Leader>u viwbUl
" }}}


" VUNDLE SETUP {{{
    set nocompatible              " be iMproved, required
    filetype off                  " required

    set rtp+=~/.vim/plugin/binary.vim
    " set the runtime path to include Vundle and initialize
    set rtp+=~/.vim/bundle/Vundle.vim
    call vundle#begin()
    " alternatively, pass a path where Vundle should install plugins
    "call vundle#begin('~/some/path/here')

    " let Vundle manage Vundle, required
    Plugin 'gmarik/Vundle.vim'
" }}}

" BASE16 VIM THEME PLUGIN CONFIGURATIOJN {{{
  let base16colorspace=256
  set background=dark

  " but base16colorspace needs to be set first!
  colorscheme base16-horizon-dark

  hi clear SpellBad
  hi SpellBad cterm=underline
  " Set style for gVim
  hi SpellBad gui=undercurl

  " Comments in italics
  hi Comment cterm=italic
  hi Comment gui=undercurl

" }}}

" INDENTING / TABS & SPACING {{{
  set autoindent
  set smartindent " almost like cindent, but works better for most languages

  set expandtab " convert tabs to spaces
  set smarttab " delete whole tab at once on backspace, even when they are spaces


  set list " enable showing other chars instead of spaces etc.
  set listchars= " clear to not show $ at end of lin
  set listchars+=tab:»· " show tabs
  set listchars+=trail:· " show trailing spaces

  set tabstop=4  "four is a good default
  set softtabstop=4 " you can use :set sts=2 for temporarily changing tabstop & shiftwidth
  set shiftwidth=4

  " Language specific indents
  Plugin 'junegunn/vim-easy-align'
  xmap <Leader>a <Plug>(EasyAlign)
  nmap <Leader>a <Plug>(EasyAlign)
" }}}

" LINE WRAPPING {{{
  " wrap lines and show an arrow
  set wrap
  set linebreak
  set breakindent
  " set breakindentopt+=shift:0,sbr
  set showbreak=↳
  " in case nowrap gets set, show arrows
  set listchars+=precedes:«,extends:»
" }}}

" FZF FUZZY SEARCH {{{
  Plugin 'junegunn/fzf'
  Plugin 'junegunn/fzf.vim'

  noremap <Leader>sf <ESC>:Files<CR>
  " search lines in current buffe
  noremap <Leader>sl <ESC>:BLines<CR>
  noremap <Leader>t <Esc>:Tags<CR>
  noremap <Leader>T <Esc>:BTags<CR>
  noremap <Leader>h <ESC>:Helptags<CR>
  " search history
  noremap <Leader>/  <ESC>:History/<CR>n
  " command mode history
  noremap <Leader>:  <ESC>:History\:<CR>
  " open recent file
  noremap <Leader><Enter> <ESC>:History<CR>
" }}}

" RIPGREP: FULLTEXT RECURSIVE DIRECTORY SEARCH {{{
  " results will be opened in the quickfix list
  Plugin 'jremmen/vim-ripgrep'
  noremap <Leader>f <ESC>:Rg <C-R>/
  noremap <Leader>F <ESC>:Rg <C-R><C-W>
" }}}

" BASIC UNIX COMMANDS AS EX COMMANDS {{{
  Plugin 'tpope/vim-eunuch'
  " this also as the useful, :SudoWrite & s:SudoEdit
  " have ranger mappings
  noremap <F2> :Move <C-R>%
  noremap <F5> :e<CR>
  noremap <F7> :Mkdir 
  noremap <F8> :Unlink<C-R>
" }}}



" TAGS GENERAL {{{
"" set tags+=./,, is relative to the current directory, not the current file
  set cpoptions+=d
  set tags +=./,,vimtags,~/tags
  set tagcase=followscs
  " show more information about a tag when completing
  set showfulltag
" }}}

" POSTGRESQL SUPPORT {{{
  Plugin 'lifepillar/pgsql.vim'
  " treat .sql files as pgsql
  let g:sql_type_default = 'pgsql'

  " set equalprg for sql files to format sql
  autocmd FileType sql setlocal equalprg=sqlformat\ --reindent\ --keywords\ upper\ --identifiers\ lower\ -
" }}}


" GIT INTEGRATION {{{
  " setup statusline
  set statusline="f %{FugitiveStatusLine()}"


  " use fzf for searching git files
  noremap <Leader>sgf <ESC>:GFiles<CR>

  " bind fugitive functions to <Leader>g* the same way as
  " the shell and git aliases (see home.nix)
  "
  " status
  noremap <Leader>gs <ESC>:Gstatus<CR>

  " adding files / staging
  noremap <Leader>ga <ESC>:Git ap -- %<CR>
  " this is required untracked files
  noremap <Leader>gA <ESC>:Git add  -- %<CR>

  " unstaging / checkout
  noremap <Leader>gu <ESC>:Git unstage --patch -- %<CR>
  noremap <Leader>gU <ESC>:Git unstage -- %<CR>
  noremap <Leader>gc <ESC>:Gcommit<CR>
  noremap <Leader>gx <ESC>:Git undo<CR>
  noremap <Leader>gd <ESC>:Gdiff<CR>
  noremap <Leader>gl <ESC>:Glog<CR>
  noremap <Leader>gL <ESC>:Gllog<CR>
  noremap <Leader>gk <ESC>:Git kp -- %<CR>
  " this is required untracked files
  noremap <Leader>gK <ESC>:Git k -- %<CR>
  noremap <Leader>gp <ESC>:Gpush<CR>
  noremap <Leader>gP <ESC>:Gpull --autostash<CR>
  noremap <Leader>gf <ESC>:Gfetch --prune --all<CR>
  noremap <Leader>gF <ESC>:Git forward

  " inconsistent, gb changes branch in zsh
  noremap <Leader>gb <ESC>:Gblame<CR>
  " additional goodies for getting opening stuff up in github automatically
  noremap <Leader>gw <ESC>v:Gbrowse<CR>
  vnoremap <Leader>gw :Gbrowse<CR>

  au BufReadPost HUB_EDITMSG* set filetype=markdown
" }}}

" FOLDING {{{
  set foldmethod=marker
  set foldnestmax=3 " at most 3 folds in each other, or it gets annoying


  " set foldopen=block,hor,insert,mark,percent,quickfix,search,tag
  set foldopen=all
  set foldclose=all
  set foldlevelstart=0
  set foldcolumn=1
  " augroup vimrc
    " au BufReadPre * setlocal foldmethod=syntax
    " au BufWinEnter * if &fdm == 'syntax' | setlocal foldmethod=manual | endif
  " augroup END
" }}}

" AUTOCOMPLETION {{{
  let g:neocomplete#enable_at_startup = 1

  " Required for operations modifying multiple buffers like rename.
  set hidden

  let g:LanguageClient_serverCommands = {
      \ 'python': ['/usr/local/bin/pyls'],
      \ 'php': ['psalm', '--language-server'],
      \ }
      " \ 'rust': ['~/.cargo/bin/rustup', 'run', 'stable', 'rls'],
      "\ 'javascript': ['/usr/local/bin/javascript-typescript-stdio'],
      " \ 'javascript.jsx': ['tcp://127.0.0.1:2089'],
      " \ 'ruby': ['~/.rbenv/shims/solargraph', 'stdio'],

  nnoremap <Leader>dm :call LanguageClient_contextMenu()<CR>
  " Or map each action separately
  nnoremap <silent> <Leader>dl :call LanguageClient#textDocument_hover()<CR>
  nnoremap <silent> <Leader>dd :call LanguageClient#textDocument_definition()<CR>
  nnoremap <silent> <Leader>r :call LanguageClient#textDocument_rename()<CR>


  " add the closing bracket when breaking the line
  " inoremap {<CR> {<CR>}<C-O>O
  " inoremap (<CR> (<CR>)<C-O>O
  " inoremap [<CR> [<CR>]<C-O>O

  Plugin 'rstacruz/vim-closer'
  Plugin 'tpope/vim-endwise'
" }}}

" PHP SUPPORT {{{
  autocmd FileType php set keywordprg=vim-keyword-web-search\ https://www.php.net/\\\%s
  let g:syntastic_php_checkers = ['php', 'psalm']

  " PHP syntax settings (php.vim)
  " hilight sql queries
  let php_sql_query = 1
  let php_baselib = 1
  let php_htmlInStrings = 0
  let php_folding = 1
  let php_parent_error_close = 0
  let php_parent_error_open = 0

  let g:syntastic_php_checkers = ['php', 'phpcs', 'psalm']
" }}}

" HTML / XML integration {{{
  " Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
  Plugin 'alvan/vim-closetag'
  let g:closetag_filenames = '*.html,*.htm,*.xhtml,*.phtml,*.xml,*.xsd,*.xsl'
  let g:closetag_xhtml_filenames = '*.xhtml,*.xml,*.xsd,*,xsl'
  let g:closetag_filetypes = 'html,xhtml,phtml'
  let g:closetag_xhtml_filetypes = 'xhtml,jsx,xml,xsd,xsl'
  let g:closetag_close_shortcut = '\>'

  au FileType xml setlocal equalprg=xmllint\ --format\ --recover\ -\ 2>/dev/null
  " au FileType xml setlocal compiler=xmllint
  au FileType xml setlocal makeprg=xmllint\ --noout
" }}}

" LARGE FILE SUPPORT {{{
  Plugin 'vim-scripts/LargeFile'
  let g:LargeFile = 500 " > 500 megabytes is a large file
  " Use :Large to toggle largefile mode
" }}}

" LaTeX support {{{
  " use 
  "  % !TEX root = <root-filename>
  " as the first line of a text file to define which file to
  " preview and which file needs to be compiled

  " let g:vimtex_mappings_enabled = 1

  au FileType tex nnoremap <localleader>li  <plug>(vimtex-info)
  au FileType tex nnoremap <localleader>lI  <plug>(vimtex-info-full)
  au FileType tex nnoremap <localleader>lt  <plug>(vimtex-toc-open)
  au FileType tex nnoremap <localleader>lT  <plug>(vimtex-toc-toggle)
  au FileType tex nnoremap <localleader>lq  <plug>(vimtex-log)
  au FileType tex nnoremap <localleader>lv  <plug>(vimtex-view)
  au FileType tex nnoremap <localleader>lr  <plug>(vimtex-reverse-search)
  au FileType tex nnoremap <localleader>ll  <plug>(vimtex-compile)
  au FileType tex nnoremap <localleader>lL  <plug>(vimtex-compile-selected)
  au FileType tex xnoremap <localleader>lL  <plug>(vimtex-compile-selected)
  au FileType tex nnoremap <localleader>lk  <plug>(vimtex-stop)
  au FileType tex nnoremap <localleader>lK  <plug>(vimtex-stop-all)
  au FileType tex nnoremap <localleader>le  <plug>(vimtex-errors)
  au FileType tex nnoremap <localleader>lo  <plug>(vimtex-compile-output)
  au FileType tex nnoremap <localleader>lg  <plug>(vimtex-status)
  au FileType tex nnoremap <localleader>lG  <plug>(vimtex-status-all)
  au FileType tex nnoremap <localleader>lc  <plug>(vimtex-clean)
  au FileType tex nnoremap <localleader>lC  <plug>(vimtex-clean-full)
  au FileType tex nnoremap <localleader>lm  <plug>(vimtex-imaps-list)
  au FileType tex nnoremap <localleader>lx  <plug>(vimtex-reload)
  au FileType tex nnoremap <localleader>lX  <plug>(vimtex-reload-state)
  au FileType tex nnoremap <localleader>ls  <plug>(vimtex-toggle-main)
  au FileType tex nnoremap dse              <plug>(vimtex-env-delete)
  au FileType tex nnoremap dsc              <plug>(vimtex-cmd-delete)
  au FileType tex nnoremap ds$              <plug>(vimtex-env-delete-math)
  au FileType tex nnoremap dsd              <plug>(vimtex-delim-delete)
  au FileType tex nnoremap cse              <plug>(vimtex-env-change)
  au FileType tex nnoremap csc              <plug>(vimtex-cmd-change)
  au FileType tex nnoremap cs$              <plug>(vimtex-env-change-math)
  au FileType tex nnoremap csd              <plug>(vimtex-delim-change-math)
  au FileType tex nnoremap tsc              <plug>(vimtex-cmd-toggle-star)
  au FileType tex nnoremap tse              <plug>(vimtex-env-toggle-star)
  au FileType tex nnoremap tsd              <plug>(vimtex-delim-toggle-modifier)
  au FileType tex xnoremap tsd              <plug>(vimtex-delim-toggle-modifier)
  au FileType tex nnoremap tsD              <plug>(vimtex-delim-toggle-modifier-reverse)
  au FileType tex xnoremap tsD              <plug>(vimtex-delim-toggle-modifier-reverse)
  au FileType tex nnoremap <F7>             <plug>(vimtex-cmd-create)
  au FileType tex xnoremap <F7>             <plug>(vimtex-cmd-create)
  au FileType tex inoremap <F7>             <plug>(vimtex-cmd-create)
  au FileType tex inoremap ]]               <plug>(vimtex-delim-close)
  au FileType tex xnoremap ac               <plug>(vimtex-ac)
  au FileType tex onoremap ac               <plug>(vimtex-ac)
  au FileType tex xnoremap ic               <plug>(vimtex-ic)
  au FileType tex onoremap ic               <plug>(vimtex-ic)
  au FileType tex xnoremap ad               <plug>(vimtex-ad)
  au FileType tex onoremap ad               <plug>(vimtex-ad)
  au FileType tex xnoremap id               <plug>(vimtex-id)
  au FileType tex onoremap id               <plug>(vimtex-id)
  au FileType tex xnoremap ae               <plug>(vimtex-ae)
  au FileType tex onoremap ae               <plug>(vimtex-ae)
  au FileType tex xnoremap ie               <plug>(vimtex-ie)
  au FileType tex onoremap ie               <plug>(vimtex-ie)
  au FileType tex xnoremap a$               <plug>(vimtex-a$)
  au FileType tex onoremap a$               <plug>(vimtex-a$)
  au FileType tex xnoremap i$               <plug>(vimtex-i$)
  au FileType tex onoremap i$               <plug>(vimtex-i$)
  au FileType tex xnoremap aP               <plug>(vimtex-aP)
  au FileType tex onoremap aP               <plug>(vimtex-aP)
  au FileType tex xnoremap iP               <plug>(vimtex-iP)
  au FileType tex onoremap iP               <plug>(vimtex-iP)
  au FileType tex nnoremap %                <plug>(vimtex-%)
  au FileType tex xnoremap %                <plug>(vimtex-%)
  au FileType tex onoremap %                <plug>(vimtex-%)
  au FileType tex nnoremap ]]               <plug>(vimtex-]])
  au FileType tex xnoremap ]]               <plug>(vimtex-]])
  au FileType tex onoremap ]]               <plug>(vimtex-]])
  au FileType tex nnoremap ][               <plug>(vimtex-][)
  au FileType tex xnoremap ][               <plug>(vimtex-][)
  au FileType tex onoremap ][               <plug>(vimtex-][)
  au FileType tex nnoremap []               <plug>(vimtex-[])
  au FileType tex xnoremap []               <plug>(vimtex-[])
  au FileType tex onoremap []               <plug>(vimtex-[])
  au FileType tex nnoremap [[               <plug>(vimtex-[[)
  au FileType tex xnoremap [[               <plug>(vimtex-[[)
  au FileType tex onoremap [[               <plug>(vimtex-[[)
  au FileType tex nnoremap ]m               <plug>(vimtex-]m)
  au FileType tex xnoremap ]m               <plug>(vimtex-]m)
  au FileType tex onoremap ]m               <plug>(vimtex-]m)
  au FileType tex nnoremap ]M               <plug>(vimtex-]M)
  au FileType tex xnoremap ]M               <plug>(vimtex-]M)
  au FileType tex onoremap ]M               <plug>(vimtex-]M)
  au FileType tex nnoremap [m               <plug>(vimtex-[m)
  au FileType tex xnoremap [m               <plug>(vimtex-[m)
  au FileType tex onoremap [m               <plug>(vimtex-[m)
  au FileType tex nnoremap [M               <plug>(vimtex-[M)
  au FileType tex xnoremap [M               <plug>(vimtex-[M)
  au FileType tex onoremap [M               <plug>(vimtex-[M)
  au FileType tex nnoremap ]/               <plug>(vimtex-]/)
  au FileType tex xnoremap ]/               <plug>(vimtex-]/)
  au FileType tex onoremap ]/               <plug>(vimtex-]/)
  au FileType tex nnoremap ]*               <plug>(vimtex-]star)
  au FileType tex xnoremap ]*               <plug>(vimtex-]star)
  au FileType tex onoremap ]*               <plug>(vimtex-]star)
  au FileType tex nnoremap [/               <plug>(vimtex-[/)
  au FileType tex xnoremap [/               <plug>(vimtex-[/)
  au FileType tex onoremap [/               <plug>(vimtex-[/)
  au FileType tex nnoremap [*               <plug>(vimtex-[star)
  au FileType tex xnoremap [*               <plug>(vimtex-[star)
  au FileType tex onoremap [*               <plug>(vimtex-[star)
  au FileType tex nnoremap K                <plug>(vimtex-doc-package)

" }}}


" SNIPPETS (via ultisnips) {{{
  " Store Snippets in nixpkgs-config repository
  let g:UltiSnipsSnippetsDir = "~/.config/nixpkgs/vim/UltiSnips"
  let g:UltiSnipsSnippetDirectories = [
    \ 'UltiSnips',
    \ 'neosnippet-snippets',
    \ 'vim-snippets',
    \ $HOME . '/.config/nixpkgs/vim/UltiSnips',
    \ ]

  " put almost everything on tab and space
  let g:UltiSnipsExpandTrigger="<tab>"
  let g:UltiSnipsListSnippets="<c-tab>"
  let g:UltiSnipsJumpForwardTrigger="<Leader><Space>"
  let g:UltiSnipsJumpBackwardTrigger="<Leader><Tab>"

  " If you want :UltiSnipsEdit to split your window.
  let g:UltiSnipsEditSplit="context"

  " Also Use SnipMate compatible snippets in the runtimepath
  let g:UltiSnipsEnableSnipMate = 1

  noremap <Leader>ue :UltiSnipsEdit<CR>

" }}}


" FILE MANAGER (NETRW + VINEGAR + SYNC) {{{
  let g:netrw_banner = 0
  let g:netrw_liststyle = 3
  let g:netrw_fastbrowse = 1
  let g:netrw_list_hide = netrw_gitignore#Hide().'.*\.sw.$'
  let g:netrw_localmkdiropt = '-p'

  Plugin 'tpope/vim-vinegar'

  Plugin 'cosminadrianpopescu/filesync'
  noremap <Leader>ua :FileSyncNetrw `pwd` scp://
  noremap <Leader>ul :FileSyncList<CR>
" }}}


Plugin 'tomtom/tcomment_vim'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required

" VDEBUG OPTIONS {{{
" if !exists('g:vdebug_options')
"   let g:vdebug_options = {}
" endif
" let g:path_maps = {
"           \ "/home/guezzl-deployer/guezzlpage" : "/home/mkuettel/Code/guezzlpage"
"           \ }
" let g:vdebug_options.break_on_open = 0
" }}}

noremap <F12> :color zellner<enter>:set nonumber<enter>:TOhtml<enter>:w<enter>:!open %<enter>:q<enter>:set number<enter>:set background=dark<enter>:color solarized<enter>
