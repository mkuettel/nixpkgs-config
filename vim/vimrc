" MOGRIAs VIM CONFIG (generated by Home-Manager)
" vim: sw=2 ts=2 et ft=vim
" set encoding to utf8 by default
set encoding=utf-8
" this vim configuration is in utf8
scriptencoding utf-8

" the vimrc config file is somewhere in the nix store and passed
" to neovim with the -c option in the wrapper script
" This finds out where this vimrc lies during runtime
" for certain plugins to work like UltiSnips
let $MYVIMRC=expand('<sfile>:p')

set nocompatible

" GENERAL BEHAVIOUR {{{
"
  " use space as the mapleader for easy combos to type
  " these bindings can be user-defined
  let mapleader = ' '
  " and use \ as the maplocalleader (key bindings with <LocalLeader> prefix
  " this one is global as the mapleader, but bindings from filetype plugins
  " should use <LocalLeader> instead of <Leader>
  let maplocalleader = '\'

  set autowrite " save the opened file automatically when navigating, even tags
  " set autowriteall " save the opened file automatically even when quitting
  set autoread " reload file automatically when changed on disk, doesn't work in call cases, so see below
  " Triger `autoread` when files changes on disk
  " https://unix.stackexchange.com/questions/149209/refresh-changed-content-of-file-opened-in-vim/383044#383044
  " https://vi.stackexchange.com/questions/13692/prevent-focusgained-autocmd-running-in-command-line-editing-mode
  " autocmd FocusGained,BufEnter,CursorHold,CursorHoldI * if mode() != 'c' | checktime | endif
  " Notification after file change
  " https://vi.stackexchange.com/questions/13091/autocmd-event-for-autoread
  "autocmd FileChangedShellPost *
  "   \ echohl WarningMsg | echo "File changed on disk. Buffer reloaded." | echohl None
  "
  " NOTE: the two commands above dont work when being in q: or ex mode,
  "       or probably when the current buffer is not backed by a file
  au FocusGained,BufEnter * :checktime

  " pattern completion in ex mode with * of all files in the
  " working directory and in the folder of the current file

  " have Vim jump to the last position when reopening a file
  if has("autocmd")
    au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
  endif

  " open a quickfix window when using :grep or :Ggrep or :make(from vim-fugitive/git)
  autocmd QuickFixCmdPost *grep* cwindow
  autocmd QuickFixCmdPost *make* cwindow
  " quickly jump in quickfix list
  noremap <Leader>n :cnext<CR>
  noremap <Leader>N :cprevious<CR>

  noremap <Leader>l :lnext<CR>
  noremap <Leader>L :lprevious<CR>

  " activate mouse integration
  set mouse=a
  " have popup menu for right-click acations
  set mousemodel=popup_setpos
  set mousetime=300

  " have some minumum space between border
  " and the cursor on the top and bottom
  set scrolloff=5

  " show line & column number
  set ruler

  if &term =~? '^screen' || &term =~? '^tmux'
      " tmux will send xterm-style keys when its xterm-keys option
      " is on
      execute "set <xUp>=\e[1;*A"
      execute "set <xDown>=\e[1;*B"
      execute "set <xRight>=\e[1;*C"
      execute "set <xLeft>=\e[1;*D"
  endif

  " allow saving with CTRL-S ($ stty -ixon # required)
  noremap <C-S> :w<CR>
  inoremap <C-S> <Esc>:w<CR>a

  " CTRL-l like in shell for top of the screen
  noremap <C-l> zt<Esc>:redraw!<CR>
  inoremap <C-l> <Esc>zt:redraw!<CR>a

  " type ! in normal mode to run a command with the current
  noremap ! :!

  " SHIFT-ENTER builds not used and doesnt work
  noremap <Leader>b :make %:p<CR>

  " remove whitespace at end of lines
  noremap <Leader>we :%s/\s\+$//g<CR>
  vnoremap <Leader>we :s/\s\+$//g<CR>
" }}}

" SYSTEM CLIPBOARD CONFIGURATION {{{
  map <Leader>y "+y
  noremap <Leader>p :set paste<CR>"+p:set nopaste<CR>
  noremap <Leader>P :set paste<CR>"+P:set nopaste<CR>
  vnoremap <Leader>p <ESC>:set paste<CR>gv"+p:set nopaste<CR>
" }}}

" FINDING FILES WITH STANDARD VIM BEHAVIOUR {{{
  " ignore these files
  set wildignore+=*.o,*.so,*.a,*.dylib,*.dll,.*.sw?,.DS_STORE,.root,vendor,node_modules,.cache,.nix-profile
  set wildignorecase " case insensitive
  set wildoptions=tagfile " press CTRL-D while in ex mode to complete tags

  " always show vim command autocompletion
  set wildmenu
  set wildmode=longest,list,full


  " have all files in current directory in file and cd path
  " when using ex commands or gf in normal mode
  " Note: there will be language specific search paths generated
  " by a nix expression appended to this file
  set path +=.,,./src/**;$HOME/Code,./htdocs/**;$HOME/Code,.//**;$HOME/Code,./app/**;$HOME/Code
  set suffixesadd=.php,.java.,.nix,/default.nix,.tpl,.scss,.css,.js,.jsx
  set cdpath +=.,,
" }}}


" STATUS BAR (vim-airline) {{{
  " show partial commands typed below the status line
  set showcmd
  set noshowmode " it's shown on the airline anyway

  " display all buffers as tab when only one tab is open
  let g:airline#extensions#branch#enabled = 0

  let g:airline_skip_empty_sections = 1

  let g:airline_detect_modified=1
  let g:airline_detect_paste=1
  let g:airline_detect_crypt=1
  let g:airline_detect_spell=0
  let g:airline_detect_spelllang=0
  let g:airline_detect_iminsert=0

  let g:airline_inactive_collapse=1
  let g:airline_inactive_alt_sep=1
  " themes are automatically selected based on the matching colorscheme. This can be overridden by defining a value.
  let g:airline_theme='base16'

  let g:airline_powerline_fonts = 0
  let g:airline_symbols_ascii = 0

  let g:airline_theme_patch_func = 'AirlineThemePatch'
  function! AirlineThemePatch(palette)
    if g:airline_theme == 'base16'
      for colors in values(a:palette.inactive)
        let colors[3] = 245
      endfor
    endif
  endfunction

  " performance
  let g:airline_highlighting_cache = 1

  " There's also the plugin lightline available


  let g:airline_skip_empty_sections = 1
" }}}

" COMMAND MODE EMCAS/SHELL KEYBINDINGS {{{
  " most of them already exist except C-A which autocompletes everything
  " which is pretty useless? At least i'm more used to it getting me to
  " the beginning of the line
  cmap <C-A> <Home>
" }}}

" INSERT MODE EMACS/SHELL KEYBINDINGS {{{
    inoremap <C-b> <Left>
    inoremap <C-f> <Right>
    " beginning of indented line"
    imap <C-a> <Esc>^i
    inoremap <C-e> <End>
" }}}

" CURSOR AND SIDEBAR LAYOUT {{{
  set number
  if has("gui_running")
    set antialias
  endif

  set cursorline
  " https://github.com/Yggdroot/indentLine

" }}}


" INDENT LINES {{{
" "https://github.com/Yggdroot/indentLine
  " instead of cursorcolumn show indent lines (using vim 7.3 conceal feature)
  let g:indentLine_char = '|'
  " use colors from colorscheme
  let g:indentLine_setColors = 0

  " this plugin sets by default
  " set concealcursor inc
  set conceallevel=1
  set concealcursor="nc"
" }}}

" SEARCHING OPTIONS {{{
  set hlsearch
  " turn off hlsearch in normal mode with CTRL-N, disabled due to
  " autocompletion on CTRL-N
  " nnoremap <C-N> <ESC>:nohlsearch<CR>
  set incsearch " move cursor while typing search

  " the search pattern is case-insensitive when only using lowercase letters
  " note: this can be disabled by using \c in the search pattern
  set ignorecase
  set smartcase
  "because incsearch is set you can use CTRL-/ while searching to find the next match
  cmap <C-_> <C-G>
" }}}

" VIM-PLUG SETUP {{{
call plug#begin(expand('~/.config/nvim/plugged'))
" }}}
"
" SPELLING OPTIONS {{{
  lang en_US.utf8
  set spell
  set spelllang=en_us,de_ch,de,en,fr
  " maybe fast is required here because of the dictionaries
  set spellsuggest=double,30,file:$XDG_CONFIG_HOME/.config/nvim/bad2good.txt
  " setlocal spellcapcheck=[.?!]\\_[\\])'\"\	\ ]\\+
  "


  if filewritable(expand('$XDG_CONFIG_HOME').'/nvim')
    " have dictionary fixes into config dir to be able to commit it via git
    set spellfile=$XDG_CONFIG_HOME/nvim/spell/dictionary-fixes.utf-8.add
  else
    if filewritable(expand('$HOME').'/.dotfiles/nvim/spell')
      " have the .dotfiles repo in place
      set spellfile=~/.dotfiles/nvim/spell/dictionary-fixes.utf-8.add
    else
      " but in the case of home-manger/nix this directory is not writable
      set spellfile=$XDG_DATA_HOME/nvim/spell/dictionary-fixes.utf-8.add
    endif
  endif

  let g:spell_clean_limit = 60 * 60
  runtime spell/cleanadd.vim

  nnoremap <Leader>U gUiw
  nnoremap <Leader>u viwbUl
" }}}


" BASE16 VIM THEME PLUGIN CONFIGURATIOJN {{{
  let base16colorspace=256
  set background=dark

  " but base16colorspace needs to be set first!
  colorscheme base16-horizon-dark

  hi clear SpellBad
  hi SpellBad cterm=underline
  " Set style for gVim
  hi SpellBad gui=undercurl

  hi clear SpellCap
  hi SpellCap cterm=underline
  " Set style for gVim
  hi SpellCap gui=undercurl

  hi clear SpellRare
  hi SpellRare cterm=underline
  " Set style for gVim
  hi SpellRare gui=undercurl

  hi clear SpellLocal
  hi SpellLocal cterm=underline
  " Set style for gVim
  hi SpellLocal gui=undercurl

  " Comments in italics
  hi Comment cterm=italic
  hi Comment gui=italic

" }}}

" INDENTING / TABS & SPACING {{{
  set autoindent
  set smartindent " almost like cindent, but works better for most languages

  set expandtab " convert tabs to spaces
  set smarttab " delete whole tab at once on backspace, even when they are spaces


  set list " enable showing other chars instead of spaces etc.
  set listchars= " clear to not show $ at end of lin
  set listchars+=tab:»· " show tabs
  set listchars+=trail:· " show trailing spaces

  set tabstop=4  "four is a good default
  set softtabstop=4 " you can use :set sts=2 for temporarily changing tabstop & shiftwidth
  set shiftwidth=4

  " Language specific indents / align for tables
  xmap <Leader>a <Plug>(EasyAlign)
  nmap <Leader>a <Plug>(EasyAlign)
" }}}

" LINE WRAPPING {{{
  " wrap lines and show an arrow
  set wrap
  set linebreak
  set breakindent
  " set breakindentopt+=shift:0,sbr
  set showbreak=↳
  " in case nowrap gets set, show arrows
  set listchars+=precedes:«,extends:»
" }}}

" FZF FUZZY SEARCH {{{
" based on the fzf and fzf.vim plugins from junegunn
  noremap <Leader>sf <ESC>:Files<CR>
  " search lines in current buffe
  noremap <Leader>sl <ESC>:BLines<CR>
  " noremap <Leader>t <Esc>:Tags<CR>
  " noremap <Leader>T <Esc>:BTags<CR>
  " noremap <Leader>h <ESC>:Helptags<CR>
  " search history
  noremap <Leader>/  <ESC>:History/<CR>n
  " command mode history
  noremap <Leader>:  <ESC>:History\:<CR>
  " open recent file
  noremap <Leader><Enter> <ESC>:History<CR>
" }}}

" RIPGREP: FULLTEXT RECURSIVE DIRECTORY SEARCH {{{
  " results will be opened in the quickfix list
  Plug 'jremmen/vim-ripgrep'
  noremap <Leader>f <ESC>:Rg <C-R>/
  noremap <Leader>F <ESC>:Rg <C-R><C-W>
" }}}

" BASIC UNIX COMMANDS AS EX COMMANDS {{{
" The plugin vim-eunuch provides most of these
  " this also as the useful, :SudoWrite & s:SudoEdit
  " have ranger mappings
  noremap <F2> :Move <C-R>%
  noremap <F5> :e<CR>
  noremap <F7> :Mkdir 
  noremap <F8> :Unlink<C-R>
" }}}



" TAGS GENERAL {{{
"" set tags+=./,, is relative to the current directory, not the current file
  set cpoptions+=d
  set tags +=./,,vimtags,~/tags
  set tagcase=followscs
  " show more information about a tag when completing
  set showfulltag
" }}}

" POSTGRESQL SUPPORT {{{
  Plug 'lifepillar/pgsql.vim'
  " treat .sql files as pgsql
  let g:sql_type_default = 'pgsql'

  " set equalprg for sql files to format sql
  " sqlformat is not available as a ale linter yet..
  autocmd FileType sql setlocal equalprg=sqlformat\ --reindent\ --keywords\ upper\ --identifiers\ lower\ -
" }}}


" GIT INTEGRATION {{{
  " setup statusline
  set statusline="f %{FugitiveStatusLine()}"


  " use fzf for searching git files
  noremap <Leader>sgf <ESC>:GFiles<CR>

  " bind fugitive functions to <Leader>g* the same way as
  " the shell and git aliases (see home.nix)
  "
  " status
  noremap <Leader>gs <ESC>:Gstatus<CR>

  " adding files / staging
  noremap <Leader>ga <ESC>:Git ap -- %<CR>
  " this is required untracked files
  noremap <Leader>gA <ESC>:Git add  -- %<CR>

  " unstaging / checkout
  noremap <Leader>gu <ESC>:Git unstage --patch -- %<CR>
  noremap <Leader>gU <ESC>:Git unstage -- %<CR>
  noremap <Leader>gc <ESC>:Gcommit<CR>
  noremap <Leader>gx <ESC>:Git undo<CR>
  noremap <Leader>gd <ESC>:Gdiff<CR>
  noremap <Leader>gl <ESC>:Glog<CR>
  noremap <Leader>gL <ESC>:Gllog<CR>
  noremap <Leader>gk <ESC>:Git kp -- %<CR>
  " this is required untracked files
  noremap <Leader>gK <ESC>:Git k -- %<CR>
  noremap <Leader>gp <ESC>:Gpush<CR>
  noremap <Leader>gP <ESC>:Gpull --autostash<CR>
  noremap <Leader>gf <ESC>:Gfetch --prune --all<CR>
  noremap <Leader>gF <ESC>:Git forward

  " inconsistent, gb changes branch in zsh
  noremap <Leader>gb <ESC>:Gblame<CR>
  " additional goodies for getting opening stuff up in github automatically
  noremap <Leader>gw <ESC>v:Gbrowse<CR>
  vnoremap <Leader>gw :Gbrowse<CR>

  au BufReadPost HUB_EDITMSG* set filetype=markdown
" }}}

" MARKDOWN INTEGRATIN {{{
" * easy align/ultisnips can be used to create tables easier.
let g:markdown_fenced_languages = ['bash', 'php', 'css', 'sql', 'javascript']
  au BufReadPost *.md,*.markdown set filetype=markdown

  let g:vim_markdown_folding_level = 1
  let g:vim_markdown_conceal = 1
  let g:vim_markdown_conceal_code_blocks = 0
  let g:vim_markdown_math = 1
  let g:vim_markdown_frontmatter = 1
  let g:vim_markdown_strikethrough = 1
  let g:vim_markdown_new_list_item_indent = 2
" }}}

" FOLDING {{{
  set foldmethod=marker
  set foldnestmax=4 " at most 4 folds in each other, or it gets annoying

  " set foldopen=block,hor,insert,mark,percent,quickfix,search,tag
  set foldopen=all
  set foldclose=all
  set foldlevelstart=2
  set foldcolumn=0
  " augroup vimrc
    " au BufReadPre * setlocal foldmethod=syntax
    " au BufWinEnter * if &fdm == 'syntax' | setlocal foldmethod=manual | endif
  " augroup END
" }}}


" AUTOCOMPLETION {{{
  " ale replaces sets this s weill, deoplete behaves differently as well
  " set completeopt=menu,menuone,preview,noinsert,noselect
  let g:deoplete#enable_at_startup = 0

  function ConfigureDeoplete()
    call deoplete#initialize()


    call deoplete#custom#option({
    \ 'auto_complete_delay': 0,
    \ 'min_pattern_length': 0,
    \ 'max_list': 50,
    \ 'smart_case': v:true,
    \ })

    call deoplete#custom#var('around', {
    \   'range_above': 15,
    \   'range_below': 15,
    \   'mark_above': '[^]',
    \   'mark_below': '[v]',
    \   'mark_changes': '[*]',
    \})

    " Use ALE and also some plugin 'foobar' as completion sources for all code.
    " 'tag' is also a source
    call deoplete#custom#option('sources', {
    \ '_': ['ultisnips', 'lsp', 'member', 'around', 'buffer', 'tmux-complete', 'file', 'dictionary'],
    \ 'vim': [ 'neco-vim' ],
    \ })

    " call deoplete#custom#option('ignore_sources', {
    " \ '_': ['ale', 'member', 'around', 'file', 'buffer']
    " \ })

    call deoplete#custom#source('_', 'matchers', ['matcher_cpsm', 'matcher_length'])
    call deoplete#custom#source('_', 'sorters', ['sorter_rank'])
    call deoplete#custom#source('_', 'converters', ['converter_remove_overlap', 'converter_auto_paren'])

    call deoplete#custom#source('ultisnips', 'min_pattern_length', 1)
    call deoplete#custom#source('ultisnips', 'mark', 'S')
    call deoplete#custom#source('ultisnips', 'rank', 1000)
    call deoplete#custom#source('ultisnips', 'max_candidates', 3)

    call deoplete#custom#source('lsp', 'min_pattern_length', 2)
    call deoplete#custom#source('lsp', 'mark', 'L')
    call deoplete#custom#source('lsp', 'rank', 900)

    call deoplete#custom#source('member', 'rank', 250)
    call deoplete#custom#source('member', 'min_pattern_length', 2)

    call deoplete#custom#source('around', 'rank', 300)
    call deoplete#custom#source('around', 'min_pattern_length', 3)
    call deoplete#custom#source('around', 'max_candidates', 10)

    let g:tmuxcomplete#trigger = ''

    call deoplete#custom#source('tmux-complete', 'mark', 'T')
    call deoplete#custom#source('tmux-complete', 'min_pattern_length', 3)
    call deoplete#custom#source('tmux-complete', 'rank', 300)
    call deoplete#custom#source('tmux-complete', 'max_candidates', 3)



  " call deoplete#custom#filter('converter_reorder_attr',
  " \ 'attrs_order', {
  " \   'ruby': {
  " \     'kind': [
  " \       '!Class',
  " \     ],
  " \     'abbr': [
  " \       'ExtensionClass'
  " \     ]
  " \ },
  " \})


    call deoplete#custom#option('keyword_patterns', {
    \ '_': '[a-zA-Z_]\k*',
    \ 'tex': '\\?[a-zA-Z_]\w*',
    \ 'ruby': '[a-zA-Z_]\w*[!?]?',
    \ 'scheme': '[a-zA-Z_]\k*[!?]?',
    \ 'php': '[$a-zA-Z_]\k*',
    \ })
    " calls omni func when the following patterns match
    " call deoplete#custom#option('omni_patterns', {
    "   \ 'php': ['::', '\->', '\$'],
    "   \ 'java': '[^. *\t]\.\w*',
    "   \ 'html': ['<', '</', '<[^>]*\s[[:alnum:]-]*'],
    "   \ 'xhtml': ['<', '</', '<[^>]*\s[[:alnum:]-]*'],
    "   \ 'xml': ['<', '</', '<[^>]*\s[[:alnum:]-]*'],
    "   \})
    "

    " Keybdindings:
    " inoremap <silent><expr> <tab>
    "       \ pumvisible() ? "\<C-n>" :
    "       \ <SID>check_back_space() ? "\<TAB>" :
    "       \ deoplete#manual_complete()


    function CompleteFunc()
      let comstr = deoplete#complete_common_string()
      if comstr ==# ''
        call deoplete#auto_complete()
      endif
      return comstr
    endfunction
    inoremap <expr><TAB> CompleteFunc()
    inoremap <expr><C-TAB> deoplete#undo_completion()
    inoremap <expr><C-h>
    \ deoplete#smart_close_popup()."\<C-h>"
    inoremap <expr><BS>
    \ deoplete#smart_close_popup()."\<C-h>"

  endfunction()

  augroup DEOPLETE
    autocmd VimEnter * call ConfigureDeoplete()
  augroup END


" }}}

" SHOW SIGNATURES {{{
  set cmdheight=1
  " temporarily disabled, coc does the same
  let g:echodoc_enable_at_startup = 0
  let g:echodoc#type = 'signature'

" }}}

" PHP SUPPORT {{{
  autocmd FileType php set keywordprg=vim-keyword-web-search\ https://www.php.net/\\\%s

  " PHP syntax settings (php.vim)
  " hilight sql queries
  let php_sql_query = 1
  let php_baselib = 1
  let php_htmlInStrings = 0
  let php_folding = 1
  let php_parent_error_close = 0
  let php_parent_error_open = 0

  let g:PHP_vintage_case_default_indent = 1
  let g:PHP_noArrowMatching = 1

  " let g:syntastic_php_checkers = ['php', 'phpcs', 'psalm']
  " au FileType php setlocal makeprg=psdev\ php-cs-fixer\ fix
  "
  au FileType php setlocal makeprg=vendor/bin/phpunit
" }}}
"
" ALE SYNTAX CHECKING & FIXING {{{
  " vim restart required for new executables
  let g:ale_linters = {
  \   '*': ['proselint', 'writegood', 'languagetool'],
  \   'text': ['proselint', 'writegood', 'languagetool'],
  \   'markdown': ['proselint', 'writegood', 'languagetool'],
  \   'c': ['clang'],
  \   'sh': ['shellcheck', 'shell'],
  \   'hack': ['hack'],
  \   'php': ['psalm', 'phpcs', 'php'],
  \   'html': ['htmlhint', 'tidy'],
  \   'css': ['csslint'],
  \   'nix': ['nix'],
  \   'sql': ['sqlint'],
  \   'java': ['javac', 'checkstyle', 'pmd'],
  \   'tex': ['lacheck', 'proselint', 'languagetool'],
  \   'rust': ['cargo'],
  \   'scheme': ['raco'],
  \}
  " this is required for make the psalm language server work

  " alternatively activate all and ignore the ones we don't like
  " let g:ale_linters = 'all'
  " let g:ale_linters_ignore = {
  " }
  let g:ale_linter_aliases = {
  \ 'pgsql': ['pgsql', 'sql'],
  \ 'bash': 'sh',
  \ 'zsh': 'sh',
  \ 'xsd': ['xsd', 'xml'],
  \ 'xslt': ['xslt', 'xml'],
  \ 'php': ['php', 'sql', 'html'],
  \ 'smarty': [ 'html' ],
  \ 'html': ['html', 'javascript', 'css'],
  \ 'gitcommit': ['gitlint'],
  \ 'racket': ['scheme'],
  \ }

  let g:ale_echo_msg_format = '%linter%: %code%: %s'


  let g:ale_fixers = {
  \   '*': ['trim_whitespace'],
  \   'markdown': [],
  \   'c': ['clangtidy'],
  \   'php': ['php_cs_fixer'],
  \ }

  let g:ale_fix_on_save = 1
  let g:ale_fix_on_save_ignore = {
  \ 'markdown': ['trim_whitespace'],
  \ }

  " ale languagetool spellchecking config
  let g:ale_languagetool_executable = 'languagetool-commandline'
  let g:ale_languagetool_options = '--autoDetect --mothertongue de-CH'

  " let g:ale_completion_symbols = {
  " \ 'text': 'txt',
  " \ 'method': 'mtd',
  " \ 'function': 'fun',
  " \ 'constructor': 'new',
  " \ 'field': 'attr',
  " \ 'variable': 'var',
  " \ 'class': 'cls',
  " \ 'interface': 'intf',
  " \ 'module': 'mod',
  " \ 'property': 'prop',
  " \ 'unit': 'unit',
  " \ 'value': 'val',
  " \ 'enum': 'enum',
  " \ 'keyword': 'keyword',
  " \ 'snippet': 'S',
  " \ 'color': 'color',
  " \ 'file': 'file',
  " \ 'reference': 'ref',
  " \ 'folder': 'dir',
  " \ 'enum member': 'enumval',
  " \ 'constant': 'const',
  " \ 'struct': 'struct',
  " \ 'event': 'event',
  " \ 'operator': 'op',
  " \ 'type_parameter': 'type param',
  " \ '<default>': 'v',
  " \ }


" ALE LANGUAGE SERVER CLIENT (disabled){{{
  "let g:ale_lsp_root = {
  "      \'psalm': '/var/webapps/popscan',
  "      \'php': '/var/webapps/popscan',
  "      \}
  let g:ale_disable_lsp = 1
  let g:ale_completion_enabled = 0
  "" let g:ale_cursor_detail = 1
  "let g:ale_pattern_options = {'\.min\.js$': {'ale_enabled': 0}}
  "let g:ale_cache_executable_check_failures = 0
  "
  let g:ale_lint_on_text_changed = 1 " always saves also on changes in insert mode
  "let g:ale_command_wrapper = 'psdev exec app'
  "" let g:ale_use_global_executables = 1
  "" let g:ale_php_psalm_use_global = 1
  "" let g:ale_php_psalm_executable = $HOME.'/bin/ale-psalm'
  "" let g:ale_python_flake8_executable = '/foo/bar/flake8'
  "" let g:ale_python_flake8_use_global = 1
  "let g:ale_lsp_show_message_severity = 'information' " 'warning'
"})}

" VIM LSP LANGUAGE SERVER  CLIENT (DISABLED){{{
"
"   Plug 'prabirshrestha/async.vim'
"   Plug 'prabirshrestha/vim-lsp'
"   Plug 'thomasfaingnaert/vim-lsp-snippets'
"   Plug 'thomasfaingnaert/vim-lsp-ultisnips'
"   "" deoplete-lsp makes vim-lsp compatible with deoplete
"
"   " " Required for operations modifying multiple buffers like rename.
"   set hidden
"   " Some servers have issues with backup files, see #649.
"   set nobackup
"   set nowritebackup
"
"   " completion is handled by deoplete, ale is
"   " configured as the completion source
"   " imap <silent> <C-Space> <Plug>(ale-complete)
"   " nnoremap <leader>d :ALEGoToDefinition<CR>
"   " nnoremap <leader>sd :ALEGoToDefinitionInSplit<CR>
"   " nnoremap <leader>vd :ALEGoToDefinitionInVSplit<CR>
"   " nnoremap <leader>t :ALEGoToTypeDefinition<CR>
"   " nnoremap <Leader>r :ALERename<CR>
"   " nnoremap <Leader>c :ALEFindReferences<CR>
"     :LspCodeAction 	Gets a list of possible commands that can be applied to a file so it can be fixed (quick fix)
"   nnoremap <leader>D  :LspDeclaration<CR>
"   nnoremap <leader>d  :LspDefinition<CR>
"     " :LspDocumentDiagnostics 	Get current document diagnostics information
"     " :LspDocumentFormat 	Format entire document
"     " :LspDocumentRangeFormat 	Format document selection
"     " :LspDocumentSymbol 	Show document symbols
"   nnoremap <leader>h  :LspHover<CR>
"   nnoremap <leader>i  :LspImplementation<CR>
"     " :LspNextDiagnostic 	jump to next diagnostic (all of error, warning, information, hint)
"     " :LspNextError 	jump to next error
"   nnoremap <leader>c :LspNextReference<CR>
"     " :LspNextWarning 	jump to next warning
"     " :LspPeekDeclaration 	Go to the declaration of the word under the cursor, but open in preview window
"   nnoremap <leader>vd  :LspPeekDefinition 	Go to the definition of the word under the cursor, but open in preview window
"   nnoremap <leader>vi  :LspPeekImplementation 	Go to the implementation of an interface, but open in preview window
"   nnoremap <leader>vt :LspPeekTypeDefinition 	Go to the type definition of the word under the cursor, but open in preview window
"   ":LspPreviousDiagnostic 	jump to previous diagnostic (all of error, warning, information, hint)
"   " :LspPreviousError 	jump to previous error
"   " :LspPreviousReference 	jump to previous reference to the symbol under cursor
"   " :LspPreviousWarning 	jump to previous warning
"   nnoremap <leader>C  :LspReferences
"   nnoremap <leader>r :LspRename
"   " :LspStatus 	Show the status of the language server
"   nnoremap <leader>t :LspTypeDefinition<CR>
"   nnoremap <leader>T :LspTypeHierarchy<CR>
"   nnoremap <leader>sS :LspWorkspaceSymbol <C-R><C-W>
"   nnoremap <leader>ss :LspWorkspaceSymbol
"
"   " maybe replace K in some filetypes?
"   " let g:ale_close_preview_on_insert = 1 " shows hovers in previerw
"   " let g:ale_hover_to_preview = 1 " shows hovers in previerw
"   " nnoremap <Leader>h :ALEHover<CR>
"   "
"   " nnoremap <Leader>sS :ALESymbolSearch
"   " nnoremap <Leader>ss :ALESymbolSearch <C-R><C-W>

" }}}

" NVIM-LSP LANGUAGE SERVER CLIENT (DISABLED){{{

" }}}

" HTML / XML integration {{{
  " vim-closetag configuration
  let g:closetag_filenames = '*.html,*.htm,*.xhtml,*.phtml,*.xml,*.xsd,*.xsl'
  let g:closetag_xhtml_filenames = '*.xhtml,*.xml,*.xsd,*,xsl'
  let g:closetag_filetypes = 'html,xhtml,phtml'
  let g:closetag_xhtml_filetypes = 'xhtml,jsx,xml,xsd,xsl'
  let g:closetag_close_shortcut = '\>'

  au FileType xml setlocal equalprg=xmllint\ --format\ --recover\ -\ 2>/dev/null
  " au FileType xml setlocal compiler=xmllint
  au FileType xml setlocal makeprg=xmllint\ --noout
" }}}

" LARGE FILE SUPPORT {{{
  Plug 'vim-scripts/LargeFile'
  let g:LargeFile = 500 " > 500 megabytes is a large file
  " Use :Large to toggle largefile mode
" }}}

" LaTeX support {{{
  " use
  "  % !TEX root = <root-filename>
  " as the first line of a text file to define which file to
  " preview and which file needs to be compiled

  let g:tex_flavor = 'latex'
  let g:vimtex_mappings_enabled = 1

  let g:livepreview_use_biber = 1
" }}}

" SNIPPETS (via ultisnips) {{{
  " Store Snippets in nixpkgs-config repository
  let g:UltiSnipsSnippetsDir = "~/.config/nixpkgs/vim/UltiSnips"
  let g:UltiSnipsSnippetDirectories = [
    \ 'UltiSnips',
    \ 'neosnippet-snippets',
    \ 'vim-snippets',
    \ $HOME . '/.config/nixpkgs/vim/UltiSnips',
    \ ]

  let g:UltiSnipsExpandTrigger='<C-Space>'
  let g:UltiSnipsListSnippets='<C-L>'
  let g:UltiSnipsJumpForwardTrigger='<C-J>'
  let g:UltiSnipsJumpBackwardTrigger='<C-H>'

  " If you want :UltiSnipsEdit to split your window.
  let g:UltiSnipsEditSplit="context"

  " Also Use SnipMate compatible snippets in the runtimepath
  let g:UltiSnipsEnableSnipMate = 1

  noremap <Leader>ue :UltiSnipsEdit<CR>

" }}}

" FILE MANAGER (NETRW + VINEGAR + SYNC) {{{
  let g:netrw_banner = 0
  let g:netrw_liststyle = 3
  let g:netrw_fastbrowse = 1
  let g:netrw_list_hide = netrw_gitignore#Hide().'.*\.sw.$'
  let g:netrw_localmkdiropt = '-p'

  Plug 'cosminadrianpopescu/filesync'
  noremap <Leader>ua :FileSyncNetrw `pwd` scp://
  noremap <Leader>ul :FileSyncList<CR>
" }}}

" COC LANGUAGE SERVER {{{

  Plug 'iamcco/coc-actions'
  Plug 'marlonfan/coc-phpls', { 'do': ':CocInstall coc-phpls' }

  " " Required for operations modifying multiple buffers like rename.
  set hidden
  " Some servers have issues with backup files, see #649.
  set nobackup
  set nowritebackup

  " " Give more space for displaying messages.
  set cmdheight=2

  " " Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
  " " delays and poor user experience.
  set updatetime=300

  " " Don't pass messages to |ins-completion-menu|.
  set shortmess+=c

  " " Always show the signcolumn, otherwise it would shift the text each time
  " " diagnostics appear/become resolved.
  set signcolumn=yes

  " Use tab for trigger completion with characters ahead and navigate.
  " NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
  " other plugin before putting this into your config.
  " inoremap <silent><expr> <TAB>
  "       \ pumvisible() ? "\<C-n>" :
  "       \ <SID>check_back_space() ? "\<TAB>" :
  "       \ (Ulti_ExpandOrJump_and_getRes() > 0) ? "\<TAB>" :
  "       \ coc#refresh() | coc#expandableOrJumpable () ? 
  " inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
  "
  " inoremap <NL> <C-R>=(Ulti_ExpandOrJump_and_getRes() > 0)?"":IMAP_Jumpfunc('', 0)<CR>
  "
  " function! s:check_back_space() abort
  "   let col = col('.') - 1
  "   return !col || getline('.')[col - 1]  =~# '\s'
  " endfunction
  "
  " let g:ulti_expand_or_jump_res = 0 "default value, just set once
  " function! Ulti_ExpandOrJump_and_getRes()
  "   call UltiSnips#ExpandSnippetOrJump()
  "   return g:ulti_expand_or_jump_res
  " endfunction
  "
  inoremap <silent><expr> <TAB>
      \ pumvisible() ? coc#_select_confirm() :
      \ coc#expandableOrJumpable() ? "\<C-r>=coc#rpc#request('doKeymap', ['snippets-expand-jump',''])\<CR>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#expandable() ? coc#refresh() : "\<TAB>"

  function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~# '\s'
  endfunction

  let g:coc_snippet_next = '<tab>'

  " Use <c-space> to trigger completion.
  inoremap <silent><expr> <c-space> coc#refresh()

  " Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
  " position. Coc only does snippet and additional edit on confirm.
  inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
    \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

  autocmd! CompleteDone * if pumvisible() == 0 | pclose | endif


  " Use `[g` and `]g` to navigate diagnostics
  nmap <silent> [g <Plug>(coc-diagnostic-prev)
  nmap <silent> ]g <Plug>(coc-diagnostic-next)

  " GoTo code navigation.
  nmap <silent> <Leader>d <Plug>(coc-definition)
  nmap <silent> <Leader>t <Plug>(coc-type-definition)
  nmap <silent> <Leader>i <Plug>(coc-implementation)
  nmap <silent> <Leader>cc <Plug>(coc-references)

  " Highlight symbol under cursor on CursorHold
  autocmd CursorHold * silent call CocActionAsync('highlight')

  " Use K to show documentation in preview window.
  nnoremap <silent> K :call <SID>show_documentation()<CR>

  function! s:show_documentation()
    if (index(['vim','help'], &filetype) >= 0)
      execute 'h '.expand('<cword>')
    else
      call CocAction('doHover')
    endif
  endfunction

  " Highlight the symbol and its references when holding the cursor.
  autocmd CursorHold * silent call CocActionAsync('highlight')

  " Symbol renaming.
  nmap <leader>r <Plug>(coc-rename)

  " Formatting selected code.
  xmap <leader>cf  <Plug>(coc-format-selected)
  nmap <leader>cf  <Plug>(coc-format-selected)

" augroup mygroup
"   autocmd!
"   " Setup formatexpr specified filetype(s).
"   autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
"   " Update signature help on jump placeholder.
"   autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
" augroup end

" " Applying codeAction to the selected region.
" " Example: `<leader>aap` for current paragraph
" " xmap <leader>a  <Plug>(coc-codeaction-selected)
" " nmap <leader>a  <Plug>(coc-codeaction-selected)

" " Remap keys for applying codeAction to the current line.
" " nmap <leader>ac  <Plug>(coc-codeaction)
" " Apply AutoFix to problem on the current line.
" " nmap <leader>qf  <Plug>(coc-fix-current)

" " Introduce function text object
" " NOTE: Requires 'textDocument.documentSymbol' support from the language server.
  xmap if <Plug>(coc-funcobj-i)
  xmap af <Plug>(coc-funcobj-a)
  omap if <Plug>(coc-funcobj-i)
  omap af <Plug>(coc-funcobj-a)

" " Use <TAB> for selections ranges.
" " NOTE: Requires 'textDocument/selectionRange' support from the language server.
" " coc-tsserver, coc-python are the examples of servers that support it.
" nmap <silent> <TAB> <Plug>(coc-range-select)
" xmap <silent> <TAB> <Plug>(coc-range-select)

" " Add `:Format` command to format current buffer.
" command! -nargs=0 Format :call CocAction('format')

" " Add `:Fold` command to fold current buffer.
  command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" " Add `:OR` command for organize imports of the current buffer.
  command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" " Add (Neo)Vim's native statusline support.
" " NOTE: Please see `:h coc-status` for integrations with external plugins that
" " provide custom statusline: lightline.vim, vim-airline.
" set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" " Mappings using CoCList:
" " Show all diagnostics.
  nnoremap <silent> <space>ca  :<C-u>CocList diagnostics<cr>
  " Show commands.
  nnoremap <silent> <space>cC  :<C-u>CocList commands<cr>
  " Find symbol of current document.
  nnoremap <silent> <space>cs  :<C-u>CocList outline<cr>
  " Search workspace symbols.
  nnoremap <silent> <space>cS  :<C-u>CocList -I symbols<cr>
  " Do default action for next item.
  nnoremap <silent> <space>cj  :<C-u>CocNext<CR>
  " Do default action for previous item.
  nnoremap <silent> <space>ck  :<C-u>CocPrev<CR>
  " Resume latest coc list.
  nnoremap <silent> <space>cl  :<C-u>CocListResume<CR>

  " restart when tsserver gets wonky
  nnoremap <silent> <leader>cR  :<C-u>CocRestart<CR>

  let g:airline#extensions#coc#enabled = 1

"
" " COC snippets configuration
" inoremap <silent><expr> <TAB>
"       \ pumvisible() ? coc#_select_confirm() :
"       \ coc#expandableOrJumpable() ? "\<C-r>=coc#rpc#request('doKeymap', ['snippets-expand-jump',''])\<CR>" :
"       \ <SID>check_back_space() ? "\<TAB>" :
"       \ coc#refresh()

" function! s:check_back_space() abort
"   let col = col('.') - 1
"   return !col || getline('.')[col - 1]  =~# '\s'
" endfunction

" let g:coc_snippet_next = '<tab>'
"
"
" Vim Language Client configuration
" " Don't load language server settings (because i have none?)
" let g:LanguageClient_loadSettings = 0
" " let g:LanguageClient_settingsPath is set to <CWD>/.vim/settings.json


" let g:LanguageClient_serverCommands = {
"     \ 'python': ['/usr/local/bin/pyls'],
"     \ 'php': ['php', 'vendor/bin/psalm-language-server'],
"     \ }
"     " \ 'rust': ['~/.cargo/bin/rustup', 'run', 'stable', 'rls'],
"     "\ 'javascript': ['/usr/local/bin/javascript-typescript-stdio'],
"     " \ 'javascript.jsx': ['tcp://127.0.0.1:2089'],
"     " \ 'ruby': ['~/.rbenv/shims/solargraph', 'stdio'],

" let g:LanguageClient_loggingFile = expand('~/.vim-LanguageClient.log')

" function EnableLSP()
"   nnoremap <leader>ld :call LanguageClient#textDocument_definition()<CR>
"   nnoremap <Leader>r :call LanguageClient#textDocument_rename()<CR>
"   nnoremap <leader>lf :call LanguageClient#textDocument_formatting()<CR>
"   nnoremap <leader>lt :call LanguageClient#textDocument_typeDefinition()<CR>
"   nnoremap <leader>lr :call LanguageClient#textDocument_references()<CR>
"   nnoremap <leader>la :call LanguageClient_workspace_applyEdit()<CR>
"   nnoremap <leader>lc :call LanguageClient#textDocument_completion()<CR>
"   nnoremap <leader>lh :call LanguageClient#textDocument_hover()<CR>
"   nnoremap <leader>ls :call LanguageClient_textDocument_documentSymbol()<CR>
"   nnoremap <leader>lm :call LanguageClient_contextMenu()<CR>
" endfunction()

" augroup LSP
"   autocmd!
"   autocmd FileType php,python call EnableLSP()
" augroup END
" }}}

" All of your Plugins must be added before the following line
call plug#end()

" VDEBUG OPTIONS {{{
" if !exists('g:vdebug_options')
"   let g:vdebug_options = {}
" endif
" let g:path_maps = {
"           \ "/home/guezzl-deployer/guezzlpage" : "/home/mkuettel/Code/guezzlpage"
"           \ }
" let g:vdebug_options.break_on_open = 0
" }}}

" VIM MARKDOWN {{{
    " Disable concealing of code blocks
    let g:vim_markdown_conceal_code_blocks = 0
    " enable yaml front matter for Jekyll
    let g:vim_markdown_frontmatter = 1

    " set show links but not italic and stuff
    let g:vim_markdown_conceal = 1

    " enable strikethrough support
    let g:vim_markdown_strikethrough = 1

    " markdown list indent 2
    let g:vim_markdown_new_list_item_indent = 2

    " when using ge to follow a link the file to opened can have an additional .md extension
    let g:vim_markdown_no_extensions_in_markdown = 1

    " let ge also follow link anchors e.g. #section-1
    let g:vim_markdown_follow_anchor = 1

    " markdown code block language to filetype translation map, to syntax
    " highligh fences ```csharp
    " ``` would result in ft=cs
    let g:vim_markdown_fenced_languages = ['csharp=cs', 'c++=cpp', 'viml=vim', 'bash=sh', 'ini=dosini']

" }}}

noremap <F12> :color zellner<enter>:set nonumber<enter>:TOhtml<enter>:w<enter>:!open %<enter>:q<enter>:set number<enter>:set background=dark<enter>:color solarized<enter>
