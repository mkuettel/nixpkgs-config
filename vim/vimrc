      " MOGRIAS VIM CONFIG (generated by Home-Manager)
      " this vim configuration is in utf8
      scriptencoding utf-8
      " set encoding to utf8 by default
      set encoding=utf-8

      set nocompatible
      syntax enable

      " GENERAL BEHAVIOUR {{{
        set autowrite " save the opened file automatically when navigating, even tags
        " set autowriteall " save the opened file automatically even when quitting
        set autoread " reload file automatically when changed on disk, doesn't work in call cases, so see below
        " Triger `autoread` when files changes on disk
        " https://unix.stackexchange.com/questions/149209/refresh-changed-content-of-file-opened-in-vim/383044#383044
        " https://vi.stackexchange.com/questions/13692/prevent-focusgained-autocmd-running-in-command-line-editing-mode
        " autocmd FocusGained,BufEnter,CursorHold,CursorHoldI * if mode() != 'c' | checktime | endif
        " Notification after file change
        " https://vi.stackexchange.com/questions/13091/autocmd-event-for-autoread
        "autocmd FileChangedShellPost *
        "   \ echohl WarningMsg | echo "File changed on disk. Buffer reloaded." | echohl None
        "
        " NOTE: the two commands above dont work when being in q: or ex mode,
        "       or probably when the current buffer is not backed by a file

        " pattern completion in ex mode with * of all files in the
        " working directory and in the folder of the current file

        " have Vim jump to the last position when reopening a file
        if has("autocmd")
          au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
        endif

        " open a quickfix window when using :grep or :Ggrep (from vim-fugitive/git)
        autocmd QuickFixCmdPost *grep* cwindow

        " activate mouse integration
        set mouse=a

        " have some minumum space between border
        " and the cursor on the top and bottom
        set scrolloff=5

        " show line & column number
        set ruler

        " use space as the mapleader for easy combos to type
        let mapleader=" "

        " reload .vimrc and install plugins
        noremap <Leader>r :source ~/.vimrc<CR>
        noremap <Leader>R :source ~/.vimrc<CR>:PluginInstall<CR>

        " CTRL-l like in shell for top of the screen
        noremap <C-l> zt<Esc>:redraw!<CR>
        inoremap <C-l> <Esc>zt:redraw!<CR>i

        " type ! in normal mode to run a command with the current
        noremap ! :!

        " SHIFT-! in normal mode, runs current line as bash command
        noremap <C-S-1> "lyy:!<C-R>l

        " SHIFT-ENTER builds not used and doesnt work
        " noremap <S-Enter> :make<CR>
        " inoremap <S-Enter> :make<CR>

        " copy all into system clipboard
        noremap <Leader>ya ggvG$"+y<C-O><C-O>
        noremap <Leader>yy "+yy
        vnoremap <Leader>yy "+yy

      " }}}

      " FINDING FILES WITH STANDARD VIM BEHAVIOUR {{{
        " ignore these files
        set wildignore+=*.o,*.so,*.a,*.dylib,*.dll,.*.sw?,.DS_STORE,.root
        set wildignorecase " case insensitive
        set wildoptions=tagfile " press CTRL-D while in ex mode to complete tags

        " always show vim command autocompletion
        set wildmenu
        set wildmode=list:longest

        " have all files in current directory in file and cd path
        " when using ex commands or gf in normal mode
        " Note: there will be language specific search paths generated
        " by a nix expression appended to this file
        set path +=.,,
        set cdpath +=.,,
      " }}}

      " INSERT MODE EMACS/SHELL KEYBINDINGS {{{
          inoremap <C-b> <Left>
          inoremap <C-f> <Right>
          " overrides repeat last insert, to start of the line, use CTRL-Space instead
          inoremap <C-Space> <C-a>
          imap <C-a> <Esc>^i " beginning of indented line"
          inoremap <C-e> <End>
          " overrides digraphs functionality
          imap <C-k> <Esc>d$A
      " }}}

      " CURSOR AND SIDEBARLAYOUT {{{
        set number
        set antialias
        set cursorline
        set cursorcolumn
      " }}}

      " SEARCHING OPTIONS {{{
        " turn off hlsearch in normal mode with CTRL-N
        set hlsearch
        nnoremap <C-N> <ESC>:nohlsearch<CR>?
        set incsearch " move cursor while typing search
        set smartcase " when using capital letters, the search pattern is case sensitive
      " }}}

      " SPELLING OPTINS {{{
        set spell
        set spelllang=en
        set spellsuggest=best
      " }}}

      " MAKE COMMANDS & QUICKFIX {{{
        " Note: there will be language specific search paths generated
        " by a nix expression appended to this file
      " }}}

      " VUNDLE SETUP {{{
          set nocompatible              " be iMproved, required
          filetype off                  " required

          set rtp+=~/.vim/plugin/binary.vim
          " set the runtime path to include Vundle and initialize
          set rtp+=~/.vim/bundle/Vundle.vim
          call vundle#begin()
          " alternatively, pass a path where Vundle should install plugins
          "call vundle#begin('~/some/path/here')

          " let Vundle manage Vundle, required
          Plugin 'gmarik/Vundle.vim'
      " }}}

      " SOLARIZED THEME PLUGIN {{{
        Plugin 'altercation/vim-colors-solarized'
        " Plugin 'godlygeek/tabular'
      " }}}

      " NIX LANGUAGE SUPPORT {{{
        Plugin 'LnL7/vim-nix'
      " }}}

      " INDENTING / TABS & SPACING {{{
        set autoindent
        set smartindent " almost like cindent, but works better for most languages

        set expandtab " convert tabs to spaces
        set smarttab " delete whole tab at once on backspace, even when they are spaces


        set list " enable showing other chars instead of spaces etc.
        set listchars= " clear to not show $ at end of lin
        set listchars+=tab:»· " show tabs
        set listchars+=trail:· " show trailing spaces

        set tabstop=4  "four is a good default
        set softtabstop=4 " you can use :set sts=2 for temporarily changing tabstop & shiftwidth
        set shiftwidth=4

        Plugin 'junegunn/vim-easy-align'
        xnoremap <Leader>a <Plug>(EasyAlign)
        nnoremap <Leader>a <Plug>(EasyAlign)
        vnoremap <Leader>a <Plug>(EasyAlign)
      " }}}

      " LINE WRAPPING {{{
        " wrap lines and show an arrow
        set wrap
        set linebreak
        set breakindent
        set showbreak=⮕

        " in case nowrap gets set, show arrows
        set listchars+=precedes:⬅,extends:⮕
      " }}}

      " FZF FUZZY SEARCH {{{
        Plugin 'junegunn/fzf'
        Plugin 'junegunn/fzf.vim'
        Plugin 'jremmen/vim-ripgrep'

        noremap <Leader>f <ESC>:Files<CR>
        noremap <Leader>m <ESC>:BLines<CR> " search buffer lines
        noremap <Leader>t <Esc>:Tags<CR>
        noremap <Leader>T <Esc>:BTags<CR>
        noremap <Leader>f <ESC>:Rg <C-R>/
        noremap <Leader>F <ESC>:Rg <C-R><C-W>
        noremap <Leader>h <ESC>:Helptags<CR>
        noremap <Leader>/  <ESC>:History/<CR> " search history
        noremap <Leader>:  <ESC>:History\:<CR> " command mode history
        noremap <Leader><Enter> <ESC>:History<CR> " open recent file
        noremap <Leader><Space> <ESC>:BTags<CR> " search tags in current file
      " }}}

      " TAGS GENERAL {{{
          set cpoptions+=d " set tags+=./,, is relative to the current directory, not the current file
          set tags +=./,,vimtags,~/tags
      " }}}

      " TAGS GUTENTAG (VIM 8 only) {{{
        Plugin 'ludovicchabant/vim-gutentags'
        Plugin 'skywind3000/gutentags_plus'
        " enable gtags module
        let g:gutentags_modules = ['ctags', 'gtags_cscope']

        " config project root markers. .envrc is from direnv and "shell" project management
        let g:gutentags_project_root = ['.root', '.envrc', '.git']

        " generate datebases in my cache directory, prevent gtags files polluting my project
        let g:gutentags_cache_dir = expand('~/.cache/tags')

        " allow gutentags adding gtags databases
        let g:gutentags_auto_add_gtags_cscope = 1
      " }}}


      " TAGS EASYTAGS (old){{{
      "   Plugin 'xolox/vim-misc'
      "   Plugin 'xolox/vim-easytags'
      "   let g:easytags_always_enabled = 1
      "   let g:easytags_async=1
      "   let g:easytags_syntax_keyword = 'always'
      "   let g:easytags_include_members = 1
      "   " tags file per working directory
      "   " set tags=./.vimtags
      "   " let g:easytags_dynamic_files = 1 doesnt work?
      "   let g:easytags_auto_highlight = 0 " doesnt work either...
      " }}}

      " POSTGRESQL SUPPORT {{{
        Plugin 'lifepillar/pgsql.vim'
        " treat .sql files as pgsql
        let g:sql_type_default = 'pgsql'
      " }}}


      " GIT INTEGRATION {{{
        Plugin 'tpope/vim-fugitive'
        " GitHub integration for vim-fugitive
        " for example for :Gbrowse to work
        Plugin 'tpope/vim-rhubarb'
        " setup statusline
        set statusline="f %{FugitiveStatusLine()}"


        " use fzf for searching git files
        noremap <Leader>gf <ESC>:GFiles<CR>
        noremap <Leader>gs <ESC>:GFiles?<CR>

        " bind fugitive functions to <Leader>g*
        noremap <Leader>gw <ESC>:Gbrowse<CR>
        noremap <Leader>gb <ESC>:Gblame<CR>
        noremap <Leader>gl <ESC>:Glog<CR>
        noremap <Leader>gL <ESC>:Gllog<CR>
        noremap <Leader>gd <ESC>:Gdiff<CR>
        noremap <Leader>gc <ESC>:Gcommit<CR>
        noremap <Leader>ga <ESC>:!git add -p -- %<CR>
        " u stands for unstage or undo
        noremap <Leader>gu <ESC>:!git reset HEAD -p -- %<CR>
      " }}}

      " VIM SURROUND {{{
        Plugin 'tpope/vim-surround'
      " }}}

      " FOLDING {{{
        set foldmethod=marker
        set foldnestmax=2 " at most 2 folds in each other, or it gets annoying
        set foldopen=all " open folds, as soon as interacting with them
        set foldcolumn=1
        " augroup vimrc
          " au BufReadPre * setlocal foldmethod=syntax
          " au BufWinEnter * if &fdm == 'syntax' | setlocal foldmethod=manual | endif
        " augroup END
      " }}}

      " AUTOCOMPLETION {{{
        " press <TAB>, when
        Plugin 'Valloric/YouCompleteMe'
        let g:ycm_semantic_triggers =  {
          \   'c' : ['->', '.'],
          \   'objc' : ['->', '.', 're!\[[_a-zA-Z]+\w*\s', 're!^\s*[^\W\d]\w*\s',
          \             're!\[.*\]\s'],
          \   'ocaml' : ['.', '#'],
          \   'cpp,cuda,objcpp' : ['->', '.', '::'],
          \   'perl' : ['->'],
          \   'php' : ['->', '::', '$'],
          \   'cs,java,javascript,typescript,d,python,perl6,scala,vb,elixir,go' : ['.'],
          \   'ruby' : ['.', '::'],
          \   'lua' : ['.', ':'],
          \   'erlang' : [':'],
          \   'tpl': ['{', '$', '.'],
          \ }
        " complete brackets etc.

        " add the closing bracket when breaking the line
        " inoremap {<CR> {<CR>}<C-O>O
        " inoremap (<CR> (<CR>)<C-O>O
        " inoremap [<CR> [<CR>]<C-O>O

        Plugin 'rstacruz/vim-closer'
        Plugin 'tpope/vim-endwise'
      " }}}

      " PHP SUPPORT (unneeded?){{{
      "  Plugin '2072/PHP-Indenting-for-VIm'
      "  " Plugin 'rayburgemeestre/phpfolding.vim'
      "  Plugin 'vim-vdebug/vdebug'
      "  Plugin 'shawncplus/phpcomplete.vim'
      "  let g:PHP_removeCRwhenUnix=1
      "  autocmd FileType php set omnifunc=phpcomplete#CompletePHP
      " }}}

      " HTML integration {{{
        Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
      "}}}

      " GLSL support {{{
        Plugin 'tikhomirov/vim-glsl'
      " }}}

      " LaTeX support {{{
        Plugin 'vim-latex/vim-latex'
        Plugin 'xuhdev/vim-latex-live-preview'

        " start livepreview
        " use 
        "  % !TEX root = <root-filename>
        " as the first line of a text file to define which file to
        " preview
        noremap <Leader>lp :LLPStartPreview

        " use evince as preview program
        let g:livepreview_previewer = 'evince'
      " }}}

      Plugin 'tomtom/tcomment_vim'

      " All of your Plugins must be added before the following line
      call vundle#end()            " required
      filetype plugin indent on    " required

      " SOLARIZED THEME {{{
        set t_Co=16
        syntax enable
        set background=dark
        let g:solarized_termcolors=256
        colorscheme solarized
      " }}}

      " NETRW FILE MANAGER {{{
        let g:netrw_banner = 0
        let g:netrw_liststyle = 3
        let g:netrw_fastbrowse = 1
        let g:netrw_list_hide = netrw_gitignore#Hide().'.*\.sw.$'
        let g:netrw_localmkdiropt = '-p'
      " }}}

      " VDEBUG OPTIONS {{{
      " if !exists('g:vdebug_options')
      "   let g:vdebug_options = {}
      " endif
      " let g:path_maps = {
      "           \ "/home/guezzl-deployer/guezzlpage" : "/home/mkuettel/Code/guezzlpage"
      "           \ }
      " let g:vdebug_options.break_on_open = 0
      " }}}

