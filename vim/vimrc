" MOGRIAS VIM CONFIG (generated by Home-Manager)
" vim: sw=2 ts=2 et
" this vim configuration is in utf8
scriptencoding utf-8
" set encoding to utf8 by default
set encoding=utf-8

set nocompatible
syntax enable

" GENERAL BEHAVIOUR {{{
  " use space as the mapleader for easy combos to type
  let mapleader=" "

  set autowrite " save the opened file automatically when navigating, even tags
  " set autowriteall " save the opened file automatically even when quitting
  set autoread " reload file automatically when changed on disk, doesn't work in call cases, so see below
  " Triger `autoread` when files changes on disk
  " https://unix.stackexchange.com/questions/149209/refresh-changed-content-of-file-opened-in-vim/383044#383044
  " https://vi.stackexchange.com/questions/13692/prevent-focusgained-autocmd-running-in-command-line-editing-mode
  " autocmd FocusGained,BufEnter,CursorHold,CursorHoldI * if mode() != 'c' | checktime | endif
  " Notification after file change
  " https://vi.stackexchange.com/questions/13091/autocmd-event-for-autoread
  "autocmd FileChangedShellPost *
  "   \ echohl WarningMsg | echo "File changed on disk. Buffer reloaded." | echohl None
  "
  " NOTE: the two commands above dont work when being in q: or ex mode,
  "       or probably when the current buffer is not backed by a file
  au FocusGained,BufEnter * :checktime

  " pattern completion in ex mode with * of all files in the
  " working directory and in the folder of the current file

  " have Vim jump to the last position when reopening a file
  if has("autocmd")
    au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
  endif

  " open a quickfix window when using :grep or :Ggrep or :make(from vim-fugitive/git)
  autocmd QuickFixCmdPost *grep* cwindow
  autocmd QuickFixCmdPost *make* cwindow
  " quickly jump in quickfix list
  noremap <Leader>n :cnext<CR>
  noremap <Leader>N :cprevious<CR>

  " activate mouse integration
  set mouse=a

  " have some minumum space between border
  " and the cursor on the top and bottom
  set scrolloff=5

  " show line & column number
  set ruler

  if &term =~ '^screen'
      " tmux will send xterm-style keys when its xterm-keys option
      " is on
      execute "set <xUp>=\e[1;*A"
      execute "set <xDown>=\e[1;*B"
      execute "set <xRight>=\e[1;*C"
      execute "set <xLeft>=\e[1;*D"
  endif

  " allow saving with CTRL-S ($ stty -ixon # required)
  noremap <C-S> :w<CR>
  inoremap <C-S> <Esc>:w<CR>a

  " CTRL-l like in shell for top of the screen
  noremap <C-l> zt<Esc>:redraw!<CR>
  inoremap <C-l> <Esc>zt:redraw!<CR>a

  " type ! in normal mode to run a command with the current
  noremap ! :!

  " i use <--> in templates and snippets to easily fill out stuff
  noremap <Leader><Space> /<++><CR>cf>

  " SHIFT-! in normal mode, runs current line as bash command
  noremap <C-S-1> "lyy:!<C-R>l

  " SHIFT-ENTER builds not used and doesnt work
  noremap <Leader>b :make %:p<CR>

  " copy all into system clipboard
  noremap <Leader>ya ggvG$"+y<C-O><C-O>
  noremap <Leader>yy "+yy
  vnoremap <Leader>y "+y
  noremap <Leader>p :set paste<CR>"+p:set nopaste<CR>
  noremap <Leader>P :set paste<CR>"+P:set nopaste<CR>
  vnoremap <Leader>p <ESC>:set paste<CR>gv"+p:set nopaste<CR>

  noremap <Leader>we :%s/\s\+$//g<CR>
  vnoremap <Leader>we :s/\s\+$//g<CR>
" }}}


" FINDING FILES WITH STANDARD VIM BEHAVIOUR {{{
  " ignore these files
  set wildignore+=*.o,*.so,*.a,*.dylib,*.dll,.*.sw?,.DS_STORE,.root,vendor,node_modules,.cache,.nix-profile
  set wildignorecase " case insensitive
  set wildoptions=tagfile " press CTRL-D while in ex mode to complete tags

  " always show vim command autocompletion
  set wildmenu
  set wildmode=longest,list,full

  " show partial commands typed below the status line
  set showcmd


  " have all files in current directory in file and cd path
  " when using ex commands or gf in normal mode
  " Note: there will be language specific search paths generated
  " by a nix expression appended to this file
  set path +=.,,./src/**;$HOME/Code,./htdocs/**;$HOME/Code,.//**;$HOME/Code,./app/**;$HOME/Code
  set suffixesadd=.php,.java.,.nix,/default.nix,.tpl,.scss,.css,.js,.jsx
  set cdpath +=.,,
" }}}

" COMMAND MODE EMCAS/SHELL KEYBINDINGS {{{
  " most of them already exist except C-A which autocompletes everything
  " which is pretty useless? At least i'm more used to it getting me to
  " the beginning of the line
  cmap <C-A> <Home>
" }}}

" INSERT MODE EMACS/SHELL KEYBINDINGS {{{
    inoremap <C-b> <Left>
    inoremap <C-f> <Right>
    " overrides repeat last insert, to start of the line, use CTRL-Space instead
    inoremap <C-Space> <C-a>
    " beginning of indented line"
    imap <C-a> <Esc>^i
    inoremap <C-e> <End>
    " overrides digraphs functionality
    imap <C-k> <Esc>d$A
" }}}

" CURSOR AND SIDEBAR LAYOUT {{{
  set number
  if has("gui_running")
    set antialias
  endif
  set cursorline
  set cursorcolumn
" }}}

" SEARCHING OPTIONS {{{
  set hlsearch
  " turn off hlsearch in normal mode with CTRL-N, disabled due to
  " autocompletion on CTRL-N
  " nnoremap <C-N> <ESC>:nohlsearch<CR>
  set incsearch " move cursor while typing search

  " the search pattern is case-insensitive when only using lowercase letters
  " note: this can be disabled by using \c in the search pattern
  set ignorecase
  set smartcase
  "because incsearch is set you can use CTRL-/ while searching to find the next match
  cmap <C-_> <C-G>
" }}}

" SPELLING OPTIONS {{{
  set spell
  set spelllang=en,de,en,de
  set spellsuggest=best

  nnoremap <Leader>U gUiw
  nnoremap <Leader>u viwbUl
" }}}


" VUNDLE SETUP {{{
    set nocompatible              " be iMproved, required
    filetype off                  " required

    set rtp+=~/.vim/plugin/binary.vim
    " set the runtime path to include Vundle and initialize
    set rtp+=~/.vim/bundle/Vundle.vim
    call vundle#begin()
    " alternatively, pass a path where Vundle should install plugins
    "call vundle#begin('~/some/path/here')

    " let Vundle manage Vundle, required
    Plugin 'gmarik/Vundle.vim'
" }}}

" SOLARIZED THEME PLUGIN {{{
  Plugin 'altercation/vim-colors-solarized'
  " Plugin 'godlygeek/tabular'
" }}}

" NIX LANGUAGE SUPPORT {{{
  Plugin 'LnL7/vim-nix'
" }}}

" INDENTING / TABS & SPACING {{{
  set autoindent
  set smartindent " almost like cindent, but works better for most languages

  set expandtab " convert tabs to spaces
  set smarttab " delete whole tab at once on backspace, even when they are spaces


  set list " enable showing other chars instead of spaces etc.
  set listchars= " clear to not show $ at end of lin
  set listchars+=tab:»· " show tabs
  set listchars+=trail:· " show trailing spaces

  set tabstop=4  "four is a good default
  set softtabstop=4 " you can use :set sts=2 for temporarily changing tabstop & shiftwidth
  set shiftwidth=4

  " Language specific indents
  Plugin 'junegunn/vim-easy-align'
  xnoremap <Leader>a <Plug>(EasyAlign)
  nnoremap <Leader>a <Plug>(EasyAlign)
  vnoremap <Leader>a <Plug>(EasyAlign)
" }}}

" LINE WRAPPING {{{
  " wrap lines and show an arrow
  set wrap
  set linebreak
  set breakindent
  " set breakindentopt+=shift:0,sbr
  set showbreak=↳
  " in case nowrap gets set, show arrows
  set listchars+=precedes:«,extends:»
" }}}

" FZF FUZZY SEARCH {{{
  Plugin 'junegunn/fzf'
  Plugin 'junegunn/fzf.vim'
  Plugin 'jremmen/vim-ripgrep'

  noremap <Leader>sf <ESC>:Files<CR>
  noremap <Leader>sl <ESC>:BLines<CR> " search buffer lines
  noremap <Leader>t <Esc>:Tags<CR>
  noremap <Leader>T <Esc>:BTags<CR>
  noremap <Leader>f <ESC>:Rg <C-R>/
  noremap <Leader>F <ESC>:Rg <C-R><C-W>
  noremap <Leader>l :Clocate 
  noremap <Leader>h <ESC>:Helptags<CR>
  noremap <Leader>/  <ESC>:History/<CR>n " search history
  noremap <Leader>:  <ESC>:History\:<CR> " command mode history
  noremap <Leader><Enter> <ESC>:History<CR> " open recent file
" }}}

" BASIC UNIX COMMANDS AS EX COMMANDS {{{
  Plugin 'tpope/vim-eunuch'
  " this also as the useful, :SudoWrite & s:SudoEdit
  " have ranger mappings
  noremap <F2> :Move <C-R>%
  noremap <F5> :e<CR>
  noremap <F7> :Mkdir 
  noremap <F8> :Unlink<C-R>
" }}}



" TAGS GENERAL {{{
  set cpoptions+=d " set tags+=./,, is relative to the current directory, not the current file
  set tags +=./,,vimtags,~/tags
  set tagcase=followscs
  " show more information about a tag when completing
  set showfulltag
" }}}

" TAGS GUTENTAG (VIM 8 only) {{{
  Plugin 'ludovicchabant/vim-gutentags'
  Plugin 'skywind3000/gutentags_plus'
  Plugin 'tranngocthachs/gtags-cscope-vim-plugin'

  " enable gtags module
  let g:gutentags_modules = ['ctags', 'gtags_cscope']

  " config project root markers. .envrc is from direnv and "shell" project management
  let g:gutentags_project_root = ['.root', '.envrc', '.git']

  " generate databases in my cache directory, prevent gtags files polluting my project
  let g:gutentags_cache_dir = expand('~/.cache/tags')

  " allow gutentags adding gtags databases
  let g:gutentags_auto_add_gtags_cscope = 1
" }}}


" TAGS EASYTAGS (old){{{
"   Plugin 'xolox/vim-misc'
"   Plugin 'xolox/vim-easytags'
"   let g:easytags_always_enabled = 1
"   let g:easytags_async=1
"   let g:easytags_syntax_keyword = 'always'
"   let g:easytags_include_members = 1
"   " tags file per working directory
"   " set tags=./.vimtags
"   " let g:easytags_dynamic_files = 1 doesnt work?
"   let g:easytags_auto_highlight = 0 " doesnt work either...
" }}}

" POSTGRESQL SUPPORT {{{
  Plugin 'lifepillar/pgsql.vim'
  " treat .sql files as pgsql
  let g:sql_type_default = 'pgsql'
" }}}


" GIT INTEGRATION {{{
  Plugin 'tpope/vim-fugitive'
  " GitHub integration for vim-fugitive
  " for example for :Gbrowse to work
  Plugin 'tpope/vim-rhubarb'
  " setup statusline
  set statusline="f %{FugitiveStatusLine()}"


  " use fzf for searching git files
  noremap <Leader>sgf <ESC>:GFiles<CR>

  " bind fugitive functions to <Leader>g* the same way as
  " the shell and git aliases (see home.nix)
  noremap <Leader>gs <ESC>:Gstatus<CR>
  noremap <Leader>ga <ESC>:Git add --patch -- %<CR>
  noremap <Leader>gu <ESC>:Git unstage --patch -- %<CR>
  noremap <Leader>gc <ESC>:Gcommit<CR>
  noremap <Leader>gx <ESC>:Git undo-commit<CR>
  noremap <Leader>gd <ESC>:Gdiff<CR>
  noremap <Leader>gl <ESC>:Glog<CR>
  noremap <Leader>gL <ESC>:Gllog<CR>
  noremap <Leader>gk <ESC>:Git checkout -p  -- %<CR>
  noremap <Leader>gp <ESC>:Gpush<CR>
  noremap <Leader>gP <ESC>:Gpull<CR>
  noremap <Leader>gf <ESC>:Gfetch<CR>:Git forward

  " inconsistent, gb changes branch in zsh
  noremap <Leader>gb <ESC>:Gblame<CR>
  " additional goodies
  noremap <Leader>gw <ESC>v:Gbrowse<CR>
  vnoremap <Leader>gw <ESC>:Gbrowse<CR>
" }}}

" VIM SURROUND {{{
  Plugin 'tpope/vim-surround'
  nnoremap <Leader>sw ysiw
  nnoremap <Leader>sw ysiw
  nnoremap <Leader>sb ysib
  nnoremap <Leader>sb ysib
" }}}

" FOLDING {{{
  set foldmethod=marker
  set foldnestmax=2 " at most 2 folds in each other, or it gets annoying
  set foldopen=all " open folds, as soon as interacting with them
  set foldcolumn=1
  " augroup vimrc
    " au BufReadPre * setlocal foldmethod=syntax
    " au BufWinEnter * if &fdm == 'syntax' | setlocal foldmethod=manual | endif
  " augroup END
" }}}

" AUTOCOMPLETION {{{
  " press <TAB>, when
  " Plugin 'Valloric/YouCompleteMe'
 "let g:ycm_semantic_triggers =  {
 "  \   'c' : ['->', '.'],
 "  \   'objc' : ['->', '.', 're!\[[_a-zA-Z]+\w*\s', 're!^\s*[^\W\d]\w*\s',
 "  \             're!\[.*\]\s'],
 "  \   'ocaml' : ['.', '#'],
 "  \   'cpp,cuda,objcpp' : ['->', '.', '::'],
 "  \   'perl' : ['->'],
 "  \   'php' : ['->', '::'],
 "  \   'cs,java,javascript,typescript,d,python,perl6,scala,vb,elixir,go' : ['.'],
 "  \   'ruby' : ['.', '::'],
 "  \   'lua' : ['.', ':'],
 "  \   'erlang' : [':'],
 "  \   'tpl': ['{', '$', '.'],
 "  \ }
  " complete brackets etc.

  " add the closing bracket when breaking the line
  " inoremap {<CR> {<CR>}<C-O>O
  " inoremap (<CR> (<CR>)<C-O>O
  " inoremap [<CR> [<CR>]<C-O>O

  Plugin 'rstacruz/vim-closer'
  Plugin 'tpope/vim-endwise'
" }}}

" PHP SUPPORT (unneeded?){{{
"  Plugin '2072/PHP-Indenting-for-VIm'
"  " Plugin 'rayburgemeestre/phpfolding.vim'
"  Plugin 'vim-vdebug/vdebug'
"  Plugin 'shawncplus/phpcomplete.vim'
"  let g:PHP_removeCRwhenUnix=1
"  autocmd FileType php set omnifunc=phpcomplete#CompletePHP
  autocmd FileType php set keywordprg=vim-keyword-web-search\ https://www.php.net/\\\%s
" }}}

" HTML / XML integration {{{
  " Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
  Plugin 'alvan/vim-closetag'
  let g:closetag_filenames = '*.html,*.htm,*.xhtml,*.phtml,*.xml,*.xsd,*.xsl'
  let g:closetag_xhtml_filenames = '*.xhtml,*.xml,*.xsd,*,xsl'
  let g:closetag_filetypes = 'html,xhtml,phtml'
  let g:closetag_xhtml_filetypes = 'xhtml,jsx,xml,xsd,xsl'
  let g:closetag_close_shortcut = '\>'

  au FileType xml setlocal equalprg=xmllint\ --format\ --recover\ -\ 2>/dev/null
  " au FileType xml setlocal compiler=xmllint
  au FileType xml setlocal makeprg=xmllint\ --noout
" }}}

" GLSL support {{{
  Plugin 'tikhomirov/vim-glsl'
" }}}


" LARGE FILE SUPPORT {{{
  Plugin 'vim-scripts/LargeFile'
  let g:LargeFile = 500 " > 500 megabytes is a large file
  " Use :Large to toggle largefile mode
" }}}

" LaTeX support {{{
  Plugin 'vim-latex/vim-latex'
  Plugin 'xuhdev/vim-latex-live-preview'

  " start livepreview
  " use 
  "  % !TEX root = <root-filename>
  " as the first line of a text file to define which file to
  " preview
  noremap <Leader>lp :LLPStartPreview


  " use evince as preview program
  let g:livepreview_previewer = 'evince'
" }}}


" SNIPPETS (via ultisnips) {{{
  Plugin 'SirVer/ultisnips'
  Plugin 'honza/vim-snippets'

  " Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
  let g:UltiSnipsExpandTrigger="<tab>"
  let g:UltiSnipsJumpForwardTrigger="<c-b>"
  let g:UltiSnipsJumpBackwardTrigger="<c-z>"

  " If you want :UltiSnipsEdit to split your window.
  let g:UltiSnipsEditSplit="vertical"
" }}}


" FILE MANAGER (NETRW + VINEGAR + SYNC) {{{
  let g:netrw_banner = 0
  let g:netrw_liststyle = 3
  let g:netrw_fastbrowse = 1
  let g:netrw_list_hide = netrw_gitignore#Hide().'.*\.sw.$'
  let g:netrw_localmkdiropt = '-p'

  Plugin 'tpope/vim-vinegar'

  Plugin 'cosminadrianpopescu/filesync'
  noremap <Leader>ua :FileSyncNetrw `pwd` scp://
  noremap <Leader>ul :FileSyncList<CR>
" }}}


Plugin 'tomtom/tcomment_vim'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required

" SOLARIZED THEME {{{
  set t_Co=16
  syntax enable
  set background=dark
  let g:solarized_termcolors=256
  colorscheme solarized
" }}}

" VDEBUG OPTIONS {{{
" if !exists('g:vdebug_options')
"   let g:vdebug_options = {}
" endif
" let g:path_maps = {
"           \ "/home/guezzl-deployer/guezzlpage" : "/home/mkuettel/Code/guezzlpage"
"           \ }
" let g:vdebug_options.break_on_open = 0
" }}}

noremap <F12> :color zellner<enter>:set nonumber<enter>:TOhtml<enter>:w<enter>:!xdg-open %<enter>:q<enter>:set number<enter>:set background=dark<enter>:color solarized<enter>
